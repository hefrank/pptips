package com.ppamy.pptips.dbs.tips_dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ppamy.pptips.dbs.tips_dao.Tips;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TIPS.
*/
public class TipsDao extends AbstractDao<Tips, Long> {

    public static final String TABLENAME = "TIPS";

    /**
     * Properties of entity Tips.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, Long.class, "date", false, "DATE");
        public final static Property Action_date = new Property(2, Long.class, "action_date", false, "ACTION_DATE");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "LATITUDE");
        public final static Property Loc_name = new Property(5, String.class, "loc_name", false, "LOC_NAME");
        public final static Property Subject = new Property(6, String.class, "subject", false, "SUBJECT");
        public final static Property Body = new Property(7, String.class, "body", false, "BODY");
        public final static Property Type = new Property(8, Integer.class, "type", false, "TYPE");
    };


    public TipsDao(DaoConfig config) {
        super(config);
    }
    
    public TipsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TIPS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'ACTION_DATE' INTEGER," + // 2: action_date
                "'LONGITUDE' TEXT," + // 3: longitude
                "'LATITUDE' TEXT," + // 4: latitude
                "'LOC_NAME' TEXT," + // 5: loc_name
                "'SUBJECT' TEXT," + // 6: subject
                "'BODY' TEXT," + // 7: body
                "'TYPE' INTEGER);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TIPS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tips entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        Long action_date = entity.getAction_date();
        if (action_date != null) {
            stmt.bindLong(3, action_date);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String loc_name = entity.getLoc_name();
        if (loc_name != null) {
            stmt.bindString(6, loc_name);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(7, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(8, body);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tips readEntity(Cursor cursor, int offset) {
        Tips entity = new Tips( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // action_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // loc_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // subject
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // body
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tips entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAction_date(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoc_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubject(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tips entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tips entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
